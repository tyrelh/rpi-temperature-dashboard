import React, {ReactElement, useEffect, useState} from 'react';
import type { GetServerSideProps, NextPage } from 'next';
import Head from 'next/head';
import { URLSearchParams } from 'url';
import TemperaturePreview from '../components/TemperaturePreview';
import { Temperature } from '../DTOS/Temperature';
import { getISODateStringFromDate, subtractDaysFromDate } from '../utils/DateUtils';
import { TEMPERATURE_API_URL as API_BASE_URL } from '../config';
import { Col, Row } from 'antd';

const TEMPERATURE_ENDPOINT = "/temperature";
const TEMPERATURES_ENDPOINT = "/temperatures";
const LOCATIONS_ENDPOINT = "/locations";

function generateDummyData() {
  return ["sun-room", "office"];
}

const Home: NextPage = (props) => {
  const [temperatureData, setTemperatureData] = useState<Temperature[]>([]);
  const [dataFetched, setDataFetched] = useState<boolean>(false);

  useEffect(() => {
    async function getData() {
      const now = new Date();
      let locations: string[] = []
      try {
        const params = {
          date: getISODateStringFromDate(now)
        };
        const esc = encodeURIComponent;
        const query = Object.keys(params).map(k => esc(k) + '=' + esc(params[k])).join('&');
        console.log(query)
        const locationsResponse = await fetch(API_BASE_URL + LOCATIONS_ENDPOINT + "?" + query);
        const locationsResponseBody = await locationsResponse.json()
        console.log("Locations response body: ", locationsResponseBody);
        locations = locations.concat(locationsResponseBody);
      } catch (e) {
        console.log("No locations were found");
      }
      
      console.log(locations);
      if (locations.length > 0) {
        
        const data: Temperature[] = [...temperatureData];
        
        for (let location of locations) {
          const params = {
            location: location,
            date: getISODateStringFromDate(now)
          };
          // console.log("Request params: ", params);
          const esc = encodeURIComponent;
          const query = Object.keys(params).map(k => esc(k) + '=' + esc(params[k])).join('&');
          const url = API_BASE_URL + TEMPERATURE_ENDPOINT + "?" + query;
          // console.log(url)
          const response = await fetch(url)
          // console.log("Raw response: ", response);
          const body = await response.json();
          if (!body) {
            console.log("No results returned from api")
            continue;
          }
          // console.log(body)

          let existing: Temperature | undefined;
          if (existing = data.find((t: Temperature) =>  t.location == location )) {
            // console.log(existing)
            existing.value = body.value;
            existing.date = body.time;
          } else {
            data.push({
              location: location,
              value: body.value,
              date: new Date(body.time)
            });
          }
        }
        // console.log(data)
      
        setDataFetched(true);
        setTemperatureData(data);
      }
    }

    if (!dataFetched) {
      getData();
    }
    
  }, []);


  function listToMatrix(list: Array<any>, columns: number):Array<Array<any>> {
    let newMatrix = new Array(Math.ceil(list.length / columns));
    let i = 0;
    while (i < list.length) {
      newMatrix[i] = new Array(columns);
      for (let j = 0; j < columns; j++) {
        newMatrix[i][j] = list[i]
      }
    }
    return newMatrix
  }


  function mapPreviewColumns(list: Array<Temperature>): ReactElement {
    console.log("mapping row: ", list)
    let elements: ReactElement[] = [];
    list.map((value, index) => {
      elements.push(
        <Col span={12}>
          <TemperaturePreview latestTemperature={value}/>
          {/* {value} */}
        </Col>
      )
      
    })

    return <>{ elements }</>
  }


  function renderTemperatureGrid(data: Array<any>) {
    const numberOfColumns = 2;
    const numberOfLocations = temperatureData.length
    // console.log(numberOfLocations)
    const numberOfRows = Math.ceil(numberOfLocations / numberOfColumns);
    // console.log(numberOfRows);

    let elements: ReactElement[] = []

    let n = 0;
    while(n < data.length) {
      elements.push(
        <Row>
          { mapPreviewColumns(data.slice(n, n + numberOfColumns)) }
        </Row>
      )
      n += numberOfColumns;
    }
    
    return <>{ elements }</>
  }


  return (
    <>
      <Head>
        <title>Create Next App</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      {/* {
        renderTemperatureGrid(["0", "1", "2"])
      } */}
      {/* {
        temperatureData.length &&
        temperatureData.map((t: Temperature) => 
          <TemperaturePreview key={t.location} latestTemperature={t}/>
        )
      } */}
      {
        temperatureData.length &&
        renderTemperatureGrid(temperatureData)
      }
    </>
  )
}

export default Home


// export const getServerSideProps: GetServerSideProps = async (context) => {
//   const date = new Date();

//   var params = {
//     location: 'office',
//     date: date.getTime().toString()
//   };

//   // console.log("Request params: ", params);
//   const esc = encodeURIComponent;
//   const query = Object.keys(params).map(k => esc(k) + '=' + esc(params[k])).join('&');
//   const url = API_URL + TEMPERATURE_ENDPOINT + "?" + query;
//   // console.log(url)
//   const response = await fetch(url)
//   // console.log("Raw response: ", response);
//   const body = await response.json();
//   if (!body) {
//     console.log("No results returned from api")
//     return {
//       props: {}
//     }
//   }
//   console.log(body)

//   return {
//     props: body
//   }
// }

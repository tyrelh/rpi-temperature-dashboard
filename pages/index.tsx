import React, {ReactElement, useEffect, useState} from 'react';
import type { NextPage } from 'next';
import Head from 'next/head';
import { getISODateStringFromDate } from '../utils/DateUtils';
import { LOCATIONS_ENDPOINT, TEMPERATURE_API_URL as API_BASE_URL } from '../config';
import { Col, Row, Grid, Tag } from 'antd';
import { buildQueryParams } from '../utils/UrlUtils';
import Loading from '../components/Loading';
import TemperatureDisplay from '../components/TemperatureDisplay';
const { useBreakpoint } = Grid;



const Home: NextPage = () => {
  const [locationData, setLocationData] = useState<string[]>([]);
  const [dataFetched, setDataFetched] = useState<boolean>(false);
  const breakpoints = useBreakpoint();


  async function fetchLocations(date: Date): Promise<string[]> {
    let locations: string[] = []
      try {
        const params = new Map<string, string>()
          .set("date", getISODateStringFromDate(date));
        const locationsResponse = await fetch(API_BASE_URL + LOCATIONS_ENDPOINT + buildQueryParams(params));
        const locationsResponseBody = await locationsResponse.json()
        locations = locations.concat(locationsResponseBody.locations);
      } catch (e) {
        console.error("No locations were found: ", e);
      }
      return locations;
    }


  useEffect(() => {
    async function getData() {
      setDataFetched(true)
      const now = new Date();
      const locations = await fetchLocations(now);
      setLocationData(locations);
    }
    if (!dataFetched) {
      getData();
    }
  }, []);


  function mapPreviewColumns(locationSubset: string[]): ReactElement {
    let elements: ReactElement[] = [];
    for (let location of locationSubset) {
      elements.push(
        <Col xs={24} sm={24} md={12} lg={12} xl={12} key={location}>
          <TemperatureDisplay location={location} />
        </Col>
      );
    }
    return <>
      { elements }
    </>;
  }


  function renderTemperatureGrid() {
    let numberOfColumns = 1
    if (breakpoints.md || breakpoints.lg || breakpoints.xl) {
      numberOfColumns = 2
    }
    let elements: ReactElement[] = []
    let n = 0;
    while(n < locationData.length) {
      elements.push(
        <Row key={n}>
          { mapPreviewColumns(locationData.slice(n, n + numberOfColumns)) }
        </Row>
      )
      n += numberOfColumns;
    }
    return <>{ elements }</>
  }


  return (
    <>
      <Head>
        <title>Create Next App</title>
        <meta name="description" content="Generated by create next app" />
        <meta httpEquiv="refresh" content="121" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      {
        locationData.length == 0 &&
        <Loading/>
      }
      {
        locationData.length != 0 && dataFetched &&
        renderTemperatureGrid()
      }
      {/* <p>
        Current break point:{' '}
        {Object.entries(breakpoints)
          .filter(screen => !!screen[1])
          .map(screen => (
            <Tag key={screen[0]}>
              {screen[0]}
            </Tag>
          ))}
      </p> */}
    </>
  )
}

export default Home
